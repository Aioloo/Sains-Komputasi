import numpy as np

def lu_decomposition(A):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))
    
    for i in range(n):
        
        for k in range(i, n):
            sum_U = sum(L[i][j] * U[j][k] for j in range(i))
            U[i][k] = A[i][k] - sum_U
        
        for k in range(i, n):
            if i == k:
                L[i][i] = 1  # Diagonal utama L adalah 1
            else:
                sum_L = sum(L[k][j] * U[j][i] for j in range(i))
                L[k][i] = (A[k][i] - sum_L) / U[i][i]
    
    return L, U

def lu_solve(L, U, b):
    n = len(L)
    y = np.zeros(n)
    x = np.zeros(n)
    
    for i in range(n):
        y[i] = b[i] - sum(L[i][j] * y[j] for j in range(i))
    
    for i in range(n-1, -1, -1):
        x[i] = (y[i] - sum(U[i][j] * x[j] for j in range(i+1, n))) / U[i][i]
    
    return x

A = np.array([[4, 3, 0],
              [3, 4, -1],
              [0, -1, 4]], dtype=float)
b = np.array([24, 30, -24], dtype=float)

L, U = lu_decomposition(A)
print("Matriks L:")
print(L)
print("Matriks U:")
print(U)

x = lu_solve(L, U, b)
print("Solusi x:")
print(x)
