import numpy as np

# Fungsi untuk metode Jacobi
def jacobi(A, b, x0, max_iter):
    n = len(A)
    x = x0.copy()
    x_new = np.zeros_like(x0)
    
    for k in range(max_iter):
        print(f"Iterasi {k+1}:")
        for i in range(n):
            sigma = sum(A[i][j] * x[j] for j in range(n) if j != i)
            x_new[i] = (b[i] - sigma) / A[i][i]
            print(f"x[{i+1}] = ({b[i]} - {sigma}) / {A[i][i]} = {x_new[i]:.6f}")
        
        x = x_new.copy()
        print("Hasil sementara:", x_new)
    
    return x_new

# Matriks koefisien (A) dan vektor hasil (b)
A = np.array([[10, -1, 2, 0],
              [-1, 11, -1, 3],
              [2, -1, 10, -1],
              [0, 3, -1, 8]])

b = np.array([6, 25, -11, 15])

# Tebakan awal (x0)
x0 = np.array([0.0, 0.0, 0.0, 0.0])

# Iterasi maksimum
max_iter = 5

# Menjalankan metode Jacobi
hasil = jacobi(A, b, x0, max_iter)

# Menampilkan hasil
print("Solusi akhir:")
for i, val in enumerate(hasil):
    print(f"x{i+1} = {val:.6f}")
