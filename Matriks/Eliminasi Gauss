import numpy as np
import sys

def gauss_Eliminaton():
    try:
        baris = input("Masukkan jumlah kolom/baris: ")
        try:
            baris = int(baris)
            if baris <= 0:
                print("Input tidak valid! Inputkan bilangan bulat positif")
                return
        except ValueError:
            print("Input tidak valid! Inputkan bilangan bulat positif")
            return

        matriksA = []
        for i in range(baris):
            try:
                baris_matriks = list(map(float, input(f"Masukkan elemen baris ke-{i + 1} (pisahkan dengan spasi): ").split()))
                if len(baris_matriks) != baris:
                    print("Input salah. Panjang elemen baris tidak sesuai. Silahkan coba lagi!")
                    return
                matriksA.append(baris_matriks)
            except ValueError:
                print("Input salah. Pastikan hanya memasukkan angka yang valid!")
                return

        matriksA = np.array(matriksA)

        print("Matriks A : ")
        print(matriksA)

        b = []
        for i in range(baris):
            try:
                elemen_b = float(input(f"Masukkan elemen b untuk baris ke-{i + 1}: "))
                b.append(elemen_b)
            except ValueError:
                print("Input salah. Pastikan hanya memasukkan angka yang valid!")
                return

        b = np.array(b)

        solusi = gaussian_elimination(matriksA, b)
        print("Solusi sistem persamaan adalah:")
        print(solusi)

    except Exception as e:
        print(f"Terjadi kesalahan: {e}")

def gaussian_elimination(A, b):
    n = len(b)

    Ab = np.hstack([A, b.reshape(-1, 1)])

    for i in range(n):
        # Partial pivoting
        max_row = np.argmax(abs(Ab[i:, i])) + i
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]

        for j in range(i + 1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, i:] -= factor * Ab[i, i:]

    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:])) / Ab[i, i]

    return x

if __name__ == "__main__":
    gauss_Eliminaton()
